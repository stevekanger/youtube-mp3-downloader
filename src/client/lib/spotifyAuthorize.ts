import config from '../../config'

/**
 * Generates a random string to be used as a code verifier
 *
 * @param length
 * @returns - the string to be used as a code verifier
 */
function generateRandomString(length: number) {
  const possible =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
  const values = crypto.getRandomValues(new Uint8Array(length))
  return values.reduce((acc, x) => acc + possible[x % possible.length], '')
}

/**
 * Convert the plain random string into a SHA-256 encoded array buffer.
 *
 * @param plain.
 * @returns The converted object
 */
async function sha256(plain: string) {
  const encoder = new TextEncoder()
  const data = encoder.encode(plain)
  return window.crypto.subtle.digest('SHA-256', data)
}

/**
 * Base 64 encode the converted SHA-256 object and replace any non url
 * safe characters.
 *
 * @param input - The SHA-256 object.
 * @returns base64 encoded string
 */
function base64encode(input: ArrayBufferLike) {
  return btoa(String.fromCharCode(...new Uint8Array(input)))
    .replace(/=/g, '')
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
}

/**
 * Generates the code challenge for spotify to verify request.
 *
 * @param codeVerifier - The random string generated by generateRandomString.
 * @returns - base64 encoded random string.
 */
async function generateCodeChallenge(codeVerifier: string) {
  const hashed = await sha256(codeVerifier)
  const codeChallenge = base64encode(hashed)
  return codeChallenge
}

/**
 * Sends the user to the spotify oauth page.
 *
 * @returns void.
 */
export default async function spotifyAuthorize() {
  const scope = 'user-read-private user-read-email'
  const authUrl = new URL('https://accounts.spotify.com/authorize')
  const referer = window.location.pathname

  const codeVerifier = generateRandomString(64)
  const codeChallenge = await generateCodeChallenge(codeVerifier)

  window.localStorage.setItem('spotify_code_verifier', codeVerifier)
  window.localStorage.setItem('spotify_oauth_referer', referer)

  const params = {
    response_type: 'code',
    client_id: config.spotifyClientId,
    scope,
    code_challenge_method: 'S256',
    code_challenge: codeChallenge,
    redirect_uri: config.clientUri + '/auth/spotify/callback',
  }

  authUrl.search = new URLSearchParams(params).toString()
  window.location.href = authUrl.toString()
}
